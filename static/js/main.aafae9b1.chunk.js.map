{"version":3,"sources":["Node.jsx","WeatherSimulation.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","row","col","typeOfNode","onMouseDown","windNorth","windSouth","windEast","windWest","onMouseEnter","onMouseUp","extraClassName","id","className","Component","WeatherSimulation","grid","mouseIsPressed","initializeGrid","setState","newGrid","getNewGridWithSoilToggled","hour","total_n_days","nodesToUpdate","slice","currentRow","Math","floor","TOTAL_N_OF_ROWS","currentCol","push","document","getElementById","length","node","shift","console","log","balance","nodeBalance","getLowPreasureSource","onClick","weatherSim","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","nodes","createNode","r","newNode","sumOfWinds","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAIqBA,G,wDASjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAKT,IAAD,EAYDC,KAAKF,MAVLG,EAFC,EAEDA,IACAC,EAHC,EAGDA,IACAC,EAJC,EAIDA,WAKAC,GATC,EAKDC,UALC,EAMDC,UANC,EAODC,SAPC,EAQDC,SARC,EASDJ,aACAK,EAVC,EAUDA,aACAC,EAXC,EAWDA,UAGAC,EAAiB,GACrB,OAAQR,GACJ,IAAK,MACDQ,EAAc,gBACd,MACJ,IAAK,QACDA,EAAc,kBACd,MACJ,IAAK,OACDA,EAAc,iBACd,MACJ,IAAK,QACDA,EAAc,kBACd,MACJ,QACIA,EAAc,gBAItB,OACI,yBACIC,GAAE,eAAUX,EAAV,YAAiBC,GACnBW,UAAWF,EACXP,YAAa,kBAAMA,EAAYH,EAAKC,IACpCO,aAAc,kBAAMA,EAAaR,EAAKC,IACtCQ,UAAW,kBAAMA,W,GArDCI,cCIbC,G,wDAEjB,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTiB,KAAM,GACNC,gBAAgB,GAJL,E,gEASf,IAAMD,EAAOE,IACblB,KAAKmB,SAAS,CAACH,W,sCAGHf,EAAKC,GACjB,IAAMkB,EAAUC,EAA0BrB,KAAKD,MAAMiB,KAAMf,EAAKC,GAChEF,KAAKmB,SAAS,CAACH,KAAMI,EAASH,gBAAgB,M,uCAGjChB,EAAKC,GAClB,GAAKF,KAAKD,MAAMkB,eAAhB,CACA,IAAMG,EAAUC,EAA0BrB,KAAKD,MAAMiB,KAAMf,EAAKC,GAChEF,KAAKmB,SAAS,CAACH,KAAMI,EAASH,gBAAgB,O,sCAI9CjB,KAAKmB,SAAS,CAACF,gBAAgB,M,mCAiB/B,IAXA,IAAIK,EAAO,EACPC,EAAe,GAGfC,EAAgB,GAGdR,EAAOhB,KAAKD,MAAMiB,KAAKS,QAIpBC,EAAaC,KAAKC,MAAMC,KAAoBH,GAAcC,KAAKC,MAAO,KAAuBF,IAClG,IAAK,IAAII,EAAa,EAAGA,EA/Cb,KA+C6CA,EACL,QAA5Cd,EAAKU,GAAYI,GAAY3B,YAAsE,SAA9Ca,EAAKU,EAAW,GAAGI,GAAY3B,aACpFa,EAAKU,GAAYI,GAAYzB,UAAY,EACzCmB,EAAcO,KAAKf,EAAKU,GAAYI,IACpCE,SAASC,eAAT,eAAgCJ,EAAkBH,EAAlD,YAAgEI,IAAcjB,UAAY,mBAKtG,KAAOW,EAAcU,OAAS,GAAG,CAC7B,IAAIC,EAAOX,EAAcY,QACzBC,QAAQC,IAAIH,GACZ,IAAII,EAAUC,EAAYL,GACV,IAAZI,IAGOA,EAAU,GAITE,EAAqBzB,EAAMmB,EAAKlC,IAAKkC,EAAKjC,MAoB1D,KAAOqB,GAAgB,KAMbD,EAAO,KACTA,EAAO,IACLC,GAIVc,QAAQC,IAAI,yB,+BAGN,IAAD,OACEtB,EAAQhB,KAAKD,MAAbiB,KAGP,OAFAqB,QAAQC,IAAItB,GAGR,oCACA,4BAAQ0B,QAAS,kBAAM,EAAKC,eAA5B,SAGA,yBAAK9B,UAAU,QACVG,EAAK4B,KAAI,SAAC3C,EAAK4C,GACZ,OACI,yBAAKC,IAAKD,GACT5C,EAAI2C,KAAI,SAACT,EAAMY,GAAa,IAClB9C,EAAwBkC,EAAxBlC,IAAKC,EAAmBiC,EAAnBjC,IAAKC,EAAcgC,EAAdhC,WACjB,OACI,kBAAC,EAAD,CACI2C,IAAKC,EACL9C,IAAKA,EACLC,IAAKA,EACLC,WAAYA,EACZE,UAAW,EACXC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVJ,YAAa,SAACH,EAAKC,GAAN,OAAc,EAAK8C,gBAAgB/C,EAAKC,IACrDO,aAAc,SAACR,EAAKC,GAAN,OACV,EAAK+C,iBAAiBhD,EAAKC,IAE/BQ,UAAW,kBAAM,EAAKwC,gC,GAjIXpC,cAgJzCI,EAAiB,WAGnB,IADA,IAAMiC,EAAQ,GACNlD,EAAM4B,EAAmB5B,GAAO,EAAIA,IAAO,CAE/C,IADA,IAAMyB,EAAa,GACXxB,EAAM,EAAGA,EAvJD,GAuJwBA,IACpCwB,EAAWK,KAAKqB,EAAWlD,EAAKD,IAEpCkD,EAAMpB,KAAKL,GAEf,OAAOyB,GAGLC,EAAa,SAAClD,EAAKD,GACrB,MAAO,CACHA,MACAC,MACAC,WAAYF,EAAM4B,IAAoB,QAAU,QAIlDR,EAA4B,SAACL,EAAMf,EAAKC,GAC1C,IAAMkB,EAAUJ,EAAKS,QAGjBU,EAAOf,EAAQS,EAAkB5B,GAAKC,GAC1C,OAAQiC,EAAKhC,YACT,IAAK,QACL,IAAK,MACD,IAAK,IAAIkD,EAAIxB,EAAkB5B,EAAKoD,EAhLxB,GAgL6CA,IAAK,CAC1DlB,EAAOf,EAAQiC,GAAGnD,GAClB,IAAMoD,EAAO,2BACNnB,GADM,IAEThC,WAAY,SAEhBiB,EAAQiC,GAAGnD,GAAOoD,EAEtB,MACJ,IAAK,OACD,IAAK,IAAID,EAAIxB,EAAkB5B,EAAKoD,GAAK,EAAGA,IAAK,CAC7ClB,EAAOf,EAAQiC,GAAGnD,GAClBmC,QAAQC,IAAI,MAAQe,EAAR,gCACZ,IAAMC,EAAO,2BACNnB,GADM,IAEThC,WAAYkD,GAAK1B,KAAKC,MAAO,KAAwB,QAAU,QAEnER,EAAQiC,GAAGnD,GAAOoD,EAEtB,MACJ,QACIjB,QAAQC,IAAI,iCAIpB,OAAOlB,GAGLoB,EAAc,SAACL,GACjB,IAAIoB,EAAapB,EAAK9B,UAAY8B,EAAK7B,UAAY6B,EAAK3B,SAAW2B,EAAK5B,SACxE,OAAIgD,EAAa,EACN,EACAA,EAAa,GACZ,EAED,GAITd,EAAuB,SAACzB,EAAMf,EAAKC,GACrC,MAAO,QCjNIsD,MARf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,QCKc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDyHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.aafae9b1.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css'\n\nexport default class Node extends Component {\n\n    /** TYPE OF NODE\n     *  1 -> air\n     *  2 -> water\n     *  3 -> soil\n     */\n\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const {\n            row,\n            col,\n            typeOfNode,\n            windNorth,\n            windSouth,\n            windEast,\n            windWest,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n        } = this.props;\n\n        let extraClassName = '';\n        switch (typeOfNode) {\n            case 'air':\n                extraClassName = `node node_air`;\n                break;\n            case 'water':\n                extraClassName = `node node_water`;\n                break;\n            case 'soil':\n                extraClassName = `node node_soil`;\n                break;\n            case 'cloud':\n                extraClassName = `node node_cloud`;\n                break;\n            default:\n                extraClassName = `node node_air`;\n                break;\n        }\n\n        return(\n            <div\n                id={`node-${row}-${col}`}\n                className={extraClassName}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}\n            ></div>\n\n        );\n    }\n\n}","import React, {Component} from 'react';\nimport Node from './Node';\nimport './WeatherSimulation.css';\n\n\nconst TOTAL_N_OF_ROWS = 10;\nconst TOTAL_N_OF_COLS = 15;\n\nexport default class WeatherSimulation extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = initializeGrid();\n        this.setState({grid})\n    }\n\n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithSoilToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithSoilToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false});\n    }\n\n    weatherSim() {\n        // initialize variables for simulation\n        //  variable to track day/night (0-6 night, 6-21 day, 21-24 night)?\n        let hour = 0;\n        let total_n_days = 10;\n\n        //  variable to track nodes to update\n        let nodesToUpdate = [];\n\n        //  auxiliar grid used to track progress\n        const grid = this.state.grid.slice();\n\n        // first create a case where there is no night or day. Lets asume it's always sunny and try to figure out the wind\n        // we know that sun affects land in between (3*TOTAL_N_OF_ROWS)/4 & TOTAL_N_OF_ROWS/4\n        for (let currentRow = Math.floor(TOTAL_N_OF_ROWS/4); currentRow <= Math.floor((3*TOTAL_N_OF_ROWS)/4); currentRow++) {\n            for (let currentCol = 0; currentCol < TOTAL_N_OF_COLS; ++currentCol) {\n                if (grid[currentRow][currentCol].typeOfNode === \"air\" && grid[currentRow+1][currentCol].typeOfNode === \"soil\") {\n                    grid[currentRow][currentCol].windNorth = 1;\n                    nodesToUpdate.push(grid[currentRow][currentCol]);\n                    document.getElementById(`node-${TOTAL_N_OF_ROWS-1-currentRow}-${currentCol}`).className = 'node node_cloud';\n                }\n            }\n        }\n\n        while (nodesToUpdate.length > 0) {\n            let node = nodesToUpdate.shift();\n            console.log(node);\n            let balance = nodeBalance(node);\n            if (balance === 0){\n                // node is balanced, do nothing\n                continue;\n            } else if (balance > 0) {\n                // node has high preasure\n            } else {\n                // node has low preasure\n                switch (getLowPreasureSource(grid, node.row, node.col)) {\n                    case 'north':\n                        // north is the source\n                        break;\n                    case 'south':\n                        // south is the source\n                        break;\n                    case 'east':\n                        // east is the source\n                        break;\n                    case 'west':\n                        // west is the source\n                        break;\n                    default:\n                        // none is the source\n                        break;\n                }\n            }\n        }\n\n        while (total_n_days >= 0) {\n            // compute one iteration\n\n            // update view\n\n            // update hours/total_remaining_days\n            if (++hour > 23) {\n                hour = 0;\n                --total_n_days;\n            }\n        }\n\n        console.log(\"simulation finished\");\n    }\n\n    render() {\n        const {grid} = this.state;\n        console.log(grid);\n\n        return (\n            <>\n            <button onClick={() => this.weatherSim()}>\n              Start\n            </button>\n            <div className=\"grid\">\n                {grid.map((row, rowIdx) => {\n                    return (\n                        <div key={rowIdx}>\n                        {row.map((node, nodeIdx) => {\n                            const {row, col, typeOfNode} = node;\n                            return (\n                                <Node\n                                    key={nodeIdx}\n                                    row={row}\n                                    col={col}\n                                    typeOfNode={typeOfNode}\n                                    windNorth={0}\n                                    windSouth={0}\n                                    windEast={0}\n                                    windWest={0}\n                                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                    onMouseEnter={(row, col) =>\n                                        this.handleMouseEnter(row, col)\n                                    }\n                                    onMouseUp={() => this.handleMouseUp()}\n                                ></Node>\n                            );\n\n                        })}\n                        </div>\n                    )\n                })}\n            </div>\n            </>\n        );\n    }\n}\n\n\nconst initializeGrid = () => {\n    // set initial grid state\n    const nodes = [];\n    for(let row = TOTAL_N_OF_ROWS-1; row >= 0 ; row--) {\n        const currentRow = [];\n        for(let col = 0; col < TOTAL_N_OF_COLS; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        nodes.push(currentRow);\n    }\n    return nodes;\n}\n\nconst createNode = (col, row) => {\n    return {\n        row,\n        col,\n        typeOfNode: row < TOTAL_N_OF_ROWS/4 ? 'water' : 'air',\n    }\n}\n\nconst getNewGridWithSoilToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n\n    // check for type of node clicked\n    let node = newGrid[TOTAL_N_OF_ROWS-1-row][col];\n    switch (node.typeOfNode) {\n        case \"water\":\n        case \"air\":\n            for (let r = TOTAL_N_OF_ROWS-1-row; r < TOTAL_N_OF_ROWS; r++) {\n                node = newGrid[r][col];\n                const newNode = {\n                    ...node,\n                    typeOfNode: 'soil',\n                };\n                newGrid[r][col] = newNode;\n            }\n            break;\n        case \"soil\":\n            for (let r = TOTAL_N_OF_ROWS-1-row; r >= 0; r--) {\n                node = newGrid[r][col];\n                console.log(\"r= \" + r + \" (3*TOTAL_N_OF_ROWS)/4 = \" + (3*TOTAL_N_OF_ROWS)/4)\n                const newNode = {\n                    ...node,\n                    typeOfNode: r >= Math.floor((3*TOTAL_N_OF_ROWS)/4) ? 'water' : 'air',\n                };\n                newGrid[r][col] = newNode;\n            }\n            break;\n        default:\n            console.log(\"Should never reach this point\");\n            break;\n\n    }\n    return newGrid;\n}\n\nconst nodeBalance = (node) => {\n    let sumOfWinds = node.windNorth + node.windSouth + node.windWest + node.windEast;\n    if (sumOfWinds > 0) {\n        return 1;\n    } else if (sumOfWinds < 0) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\nconst getLowPreasureSource = (grid, row, col) => {\n    return 'none';\n}","import React from 'react';\nimport './App.css';\nimport WeatherSimulation from './WeatherSimulation'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherSimulation></WeatherSimulation>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}